___________
___________
___________

D 335: Introduction to Programming in Python 

Date class was taken: (March 1st, 2023 - May 6th, 2023)

The following coursework represents my hands-on coding experience not only learning how to program in Python, 
but also applying the language to solve a wide variety of problems.

Posted below is a copy of my coding answers given on the Pre-Assessment for a 15 out of 15 Pass!

___________
___________
___________



#1:


Create a solution that accepts three integer inputs representing the number of times an employee travels to a job site. 
Output the total distance traveled to two decimal places given the following miles per employee commute to the job site. 

Employee A: 15.62 miles
Employee B: 41.85 miles
Employee C: 32.67 miles
The solution output should be in the format

Distance: total_miles_traveled
Sample Input/Output:

If the input is

1
2
3

then the expected output is

Distance: 197.33 miles

__________________________________________

times_traveledA = int(input())
times_traveledB = int(input())
times_traveledC = int(input())

EmployeeA = 15.62 #miles
EmployeeB = 41.85 #miles
EmployeeC = 32.67 #miles

distance_traveledA = EmployeeA * times_traveledA
distance_traveledB = EmployeeB * times_traveledB
distance_traveledC = EmployeeC * times_traveledC

total_distance_traveled = distance_traveledA + distance_traveledB + distance_traveledC

print("Distance: {:.2f} miles".format(total_distance_traveled))













#2:


Create a solution that accepts an integer input representing any number of ounces. 
Output the converted total number of tons, pounds, and remaining ounces based on the input ounces value. 
There are 16 ounces in a pound and 2,000 pounds in a ton.

The solution output should be in the format

Tons: value_1
Pounds: value_2
Ounces: value_3
Sample Input/Output:

If the input is

32035
then the expected output is

Tons: 1
Pounds: 2
Ounces: 3

__________________________________________

ounces_per_pound = 16
pounds_per_ton = 2000
num_ounces = int(input())

tons = num_ounces // (ounces_per_pound * pounds_per_ton)
remaining_ounces = num_ounces % (ounces_per_pound * pounds_per_ton)

pounds = remaining_ounces // ounces_per_pound
remaining_ounces = remaining_ounces % ounces_per_pound

print("Tons: {}".format(tons))
print("Pounds: {}".format(pounds))
print("Ounces: {}".format(remaining_ounces))
















#3:


Create a solution that accepts an integer input representing the index value for any any of the five elements in the following list:

various_data_types = [516, 112.49, True, "meow", ("Western", "Governors", "University"), {"apple": 1, "pear": 5}]

Using the built-in function type() and getting its name by using the .name attribute, output data type (e.g., int”, “float”, “bool”, “str”) based on the input index value of the list element.

The solution output should be in the format

Element index_value: data_type
Sample Input/Output:

If the input is

4

then the expected output is

Element 4: tuple

__________________________________________

index_value = int(input())

name = various_data_types[index_value]
data_type = type(name).__name__

print(f"Element {index_value}: {data_type}")















#4:


Create a solution that accepts any three integer inputs representing the base (b1, b2) and height (h) measurements of a trapezoid in meters. 
Output the exact area of the trapezoid in square meters as a float value. 
The exact area of a trapezoid can be calculated by finding the average of the two base measurements, then multiplying by the height measurement.

Trapezoid Area Formula:
A = [(b1 + b2) / 2] * h

The solution output should be in the format

Trapezoid area: area_value square meters
Sample Input/Output:

If the input is

3
4
5
then the expected output is

Trapezoid area: 17.5 square meters

__________________________________________

b1 = int(input())
b2 = int(input())
h = int(input())

area_value = ((b1 + b2) / 2) * h

print("Trapezoid area: {:.1f} square meters".format(area_value))














#5:


Create a solution that accepts five integer inputs. Output the sum of the five inputs three times, converting the inputs to the requested data type prior to finding the sum.

First output: sum of five inputs maintained as integer values
Second output: sum of five inputs converted to float values
Third output: sum of five inputs converted to string values (concatenate)
The solution output should be in the format

Integer: integer_sum_value
Float: float_sum_value
String: string_sum_value
Sample Input/Output:

If the input is

1
3
6
2
7

then the expected output is

Integer: 19
Float: 19.0
String: 13627

__________________________________________

num1 = int(input())
num2 = int(input())
num3 = int(input())
num4 = int(input())
num5 = int(input())

integer_sum = num1 + num2 + num3 + num4 + num5
float_sum = float(num1) + float(num2) + float(num3) + float(num4) + float(num5)
string_sum = str(num1) + str(num2) + str(num3) + str(num4) + str(num5)

print("Integer: {}".format(integer_sum))
print("Float: {}".format(float_sum))
print("String: {}".format(string_sum))













#6:


Create a solution that accepts an integer input representing a 9-digit unformatted student identification number. Output the identification number as a string with no spaces.

The solution output should be in the format

111-22-3333
Sample Input/Output:

If the input is

154175430
then the expected output is

154-17-5430

__________________________________________

student_id = int(input())
student_id_string = str(student_id)

first3 = student_id_string[0:3]
second2 = student_id_string[3:5]
last4 = student_id_string[5:]

print(f"{first3}-{second2}-{last4}")












#7:


Create a solution that accepts an integer input to compare against the following list:

predef_list = [4, -27, 15, 33, -10]

Output a Boolean value indicating whether the input value is greater than the maximum value from predef_list

The solution output should be in the format

Greater Than Max? Boolean_value
Sample Input/Output:

If the input is

20
then the expected output is

Greater Than Max? False

__________________________________________

predef_list = [4, -27, 15, 33, -10]
boolean_value = False
max_value = max(predef_list)
num = int(input())

if num > max_value:
    boolean_value = True
    print("Greater Than Max? {}".format(boolean_value))
else:
    print("Greater Than Max? {}".format(boolean_value))











#8:


Create a solution that accepts an integer input representing water temperature in degrees Fahrenheit. Output a description of the water state based on the following scale:

If the temperature is below 33° F, the water is “Frozen”.
If the water is between 33° F and 80° F (including 33), the water is “Cold”.
If the water is between 80° F and 115° F (including 80), the water is "Warm".
If the water is between 115° F and 211° (including 115) F, the water is “Hot".
If the water is greater than or equal to 212° F, the water is “Boiling”.

Additionally, output a safety comment only during the following circumstances:

If the water is exactly 212° F, the safety comment is "Caution: Hot!"
If the water temperature is less than 33° F, the safety comment is "Watch out for ice!"

The solution output should be in the format:

water_state
optional_safety_comment

Sample Input/Output:

If the input is

118

then the expected output is

Hot

Alternatively, if the input is

32

then the expected output is

Frozen
Watch out for ice!

__________________________________________

temperature = int(input())

if temperature >= 212:
    print("Boiling")
if temperature == 212: 
    print("Caution: Hot!")
if temperature in range(115, 212): #115-211
    print("Hot")
if temperature in range(80, 115): #80-114
    print("Warm")
if temperature in range(33, 80): #33-79
    print("Cold")
if temperature < 33:
    print("Frozen")
    print("Watch out for ice!")














#9:


Create a solution that accepts one integer input representing the index value for any of the string elements in the following list:

frameworks = ["Django", "Flask", "CherryPy", "Bottle", "Web2Py", "TurboGears"]

Output the string element of the index value entered. The solution should be placed in a try block and implement an exception of "Error" if an incompatible integer input is provided.

The solution output should be in the format:

frameworks_element

Sample Input/Output:

If the integer input is

2

then the expected output is

CherryPy

Alternatively, if the integer input is

7

then the expected output is

Error

__________________________________________


frameworks = ["Django", "Flask", "CherryPy", "Bottle", "Web2Py", "TurboGears"]
index_value = int(input())

try:
    if index_value == 0:
        print(frameworks[0])
    if index_value == 1:
        print(frameworks[1])
    if index_value == 2:
        print(frameworks[2])
    if index_value == 3:
        print(frameworks[3])
    if index_value == 4:
        print(frameworks[4])
    if index_value == 5:
        print(frameworks[5])
    if index_value > 5:
        print(frameworks[index_value])
except:
    print("Error")













#10:


Create a solution that accepts an integer input identifying how many shares of stock are to be purchased from the Old Town Stock Exchange, followed by an equivalent number of string inputs representing the stock selections. 
The following dictionary stock lists available stock selections as the key with the cost per selection as the value.

stocks = {'TSLA': 912.86 , 'BBBY': 24.84, 'AAPL': 174.26, 'SOFI': 6.92, 'KIRK': 8.72, 'AURA': 22.12, 'AMZN': 141.28, 'EMBK': 12.29, 'LVLU': 2.33}

Output the total cost of the purchased shares of stock to two decimal places.

The solution output should be in the format:

Total price: $cost_of_stocks
Sample Input/Output:

If the input is

3
SOFI
AMZN
LVLU

then the expected output is:

Total price: $150.53

__________________________________________

stocks = {'TSLA': 912.86, 'BBBY': 24.84, 'AAPL': 174.26, 'SOFI': 6.92, 'KIRK': 8.72, 'AURA': 22.12, 'AMZN': 141.28, 'EMBK': 12.29, 'LVLU': 2.33}

num_shares = int(input())
total_cost = 0

for i in range(num_shares):
    stock_selection = input()
    if stock_selection in stocks:
        total_cost += stocks[stock_selection]

print("Total price: ${:.2f}".format(total_cost))












#11:


Create a solution that accepts a string input representing a grocery store item and an integer input identifying the number of items purchased on a recent visit. 
The following dictionary purchase lists available items as the key with the cost per item as the value.

purchase = {"bananas": 1.85, "steak": 19.99, "cookies": 4.52, "celery": 2.81, "milk": 4.34}

Additionally,

If fewer than ten items are purchased, the price is the full cost per item.
If between ten and twenty items (inclusive) are purchased, the purchase gets a 5% discount.
If twenty-one or more items are purchased, the purchase gets a 10% discount.
Output the chosen item and total cost of the purchase to two decimal places.

The solution output should be in the format

item_purchased $total_purchase_cost
Sample Input/Output:

If the input is

bananas
12
then the expected output is

bananas $21.09
Alternatively, if the input is

cookies
144
then the expected output is

cookies $585.79

__________________________________________

purchase = {"bananas": 1.85, "steak": 19.99, "cookies": 4.52, "celery": 2.81, "milk": 4.34}

store_item = input()
num_items = int(input())
total_cost = purchase[store_item] * num_items

if num_items < 10:
    print(store_item, "${:.2f}".format(total_cost))
    
if num_items in range(10, 21):
    discount = total_cost * 0.05
    total_cost = total_cost - discount
    print(store_item, "${:.2f}".format(total_cost))
    
if num_items >= 21:
    discount = total_cost * 0.10
    total_cost = total_cost - discount
    print(store_item, "${:.2f}".format(total_cost))












#12:


Create a solution that accepts an input identifying the name of a text file, for example, "WordTextFile1.txt". 
Each text file contains three rows with one word per row. 
Using the open() function and write() and read() methods, interact with the input text file to write a new sentence string composed of the three existing words to the end of the file contents on a new line. 
Output the new file contents.

The solution output should be in the format:

word1
word2
word3 
sentence

Sample Input/Output:

If the input is

WordTextFile1.txt

then the expected output is

cat
chases
dog
cat chases dog

__________________________________________

def words_in_file(file):
    with open(file, "r") as f:
        words = [word.rstrip() for word in f.readlines()]
    
    sentence = " ".join(words)
    
    with open(file, "a") as f:
        f.write("\n" + sentence)
        
    with open(file, "r") as f:
        print(f.read())

file = input()
words_in_file(file)














#13:


Create a solution that accepts an input identifying the name of a CSV file, for example, "input1.csv". 
Each file contains two rows of comma-separated values. 
Import the built-in module csv and use its open() function and reader() method to create a dictionary of key:value pairs for 
each row of comma-separated values in the specified file. 
Output the file contents as two dictionaries.

The solution output should be in the format:

{'key': 'value', 'key': 'value', 'key': 'value'}
{'key': 'value', 'key': 'value', 'key': 'value'}

Sample Input/Output:

If the input is

input1.csv

then the expected output is

{'a': '100', 'b': '200', 'c': '300'}
{'bananas': '1.85', 'steak': '19.99', 'cookies': '4.52'}

Alternatively, if the input is

input2.csv

then the expected output is

{'d': '400', 'e': '500', 'f': '600'}
{'celery': '2.81', 'milk': '4.34', 'bread': '5.63'}

__________________________________________

import csv
input1 = input()

with open(input1, "r") as f:
    data = [row for row in csv.reader(f)]

for row in data:
    even = [row[i].strip() for i in range(0, len(row), 2)]
    odd = [row[i].strip() for i in range(1, len(row), 2)]
    pair = dict(zip(even, odd))
    print(pair)













#14:


Create a solution that accepts an integer input. 
Import the built-in module math and use its factorial() method to calculate the factorial of the integer input. 
Output the value of the factorial, as well as a Boolean value identifying whether the factorial output is greater than 100.

The solution output should be in the format

factorial_value
Boolean_value
Sample Input/Output:

If the input is

10
then the expected output is

3628800
True
Alternatively, if the input is

3
then the expected output is

6
False

__________________________________________

import math
num = int(input())
boolean_value = False

factorial_value = math.factorial(num)

if factorial_value > 100:
    boolean_value = True
    print(factorial_value)
    print(boolean_value)
else:
    print(factorial_value)
    print(boolean_value)














#15:


Create a solution that accepts an integer input representing the age of a pig. 
Import the existing module pigAge and use its pre-built pigAge_converter() function to calculate the human equivalent age of a pig. 
A year in a pig's life is equivalent to five years in a human's life. Output the human-equivalent age of the pig.

The solution output should be in the format

input_pig_age is converted_pig_age in human years
Sample Input/Output:

If the input is

8
then the expected output is

8 is 40 in human years

__________________________________________

import pigAge

def pigAge_converter(pigs_age):
    return pigs_age * 5

pigs_age = int(input())
converted_pigs_age = pigAge_converter(pigs_age)

print(f"{pigs_age} is {converted_pigs_age} in human years")
