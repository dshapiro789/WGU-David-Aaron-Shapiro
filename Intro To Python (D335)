___________
___________
___________

D286: Java Fundamentals

Date class was taken: (December 1st, 2023 - December 23rd, 2023)

The following coursework represents my hands-on coding experience not only learning how to program in Java, but also applying the language to solve a variety of unique problems.

Posted herein is a copy of my coding questions and answers given on the Java Pre-Assessment test for a 14 out of 14 Pass!

The actual proctored exam was very similar to the Pre-Assessment in so far as testing my knowledge of how to solve similar problems.

___________
___________
___________



#1:


20.01 Practice Lab 1 (Introduction to Java)

Write a program that outputs the pattern shown below, ending with a newline. Each line of the pattern contains 5 characters including whitespace.
The output is:

H   H
H   H
HHHHH
H   H
H   H

__________________________________________

public class LabProgram {
   public static void main(String[] args) {
      System.out.println("H   H");
      System.out.println("H   H");
      System.out.println("HHHHH");
      System.out.println("H   H");
      System.out.println("H   H");
      
   }
}









#2:


20.02 Practice Lab 2 (Multiplication)


For this lab you will use unit testing to check a null setting using assertions. Use the commented template code provided to do the following:

Write a program that collects two integer inputs and assigns them to the variables starting_num and multiplier. Multiply starting_num by multiplier and output the result. Repeat this process two more times, each time multiplying the previous result by multiplier. The three product outputs should be separated by a whitespace character, ending with a newline.

If the input is:
2 5

the output when starting_num = 2 is:
10 50 250

__________________________________________

import java.util.Scanner;

public class LabProgram {
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in); 
      /* Type your code here. */
      int starting_num = scnr.nextInt();
      int multiplier = scnr.nextInt();
      int result = starting_num;
      
      for (int i = 0; i < 3; i++) {
         result *= multiplier;
         System.out.print(result);
         
         if (i < 2) {
            System.out.print(" ");
         }
      }
      
      System.out.println();
      
   }
}









#3:


20.3 Practice Lab 3

Write a program that calculates the number of full tables for a wedding event, based on the number of expected guests. Each full table will seat 10 wedding guests.

Collect one integer input and assign it to the variable guests. Using integer division, calculate the total number of tables that will be filled. The variable tableSize has been declared and initialized and the variables guests and tablesFilled have been declared in the template code.

Output the number of tables filled, ending with a newline. Ensure your program output matches the example formatting below and works for a variety of input values.

If the input is:

340

the output is:

Tables filled: 34

Alternatively, if the input is:

349

the output is:

Tables filled: 34

__________________________________________

import java.util.Scanner;

public class LabProgram {
	public static void main(String[] args) {
		Scanner scnr = new Scanner(System.in);
		int tableSize=10, guests, tablesFilled;
      /* Type your code here. */
      guests = scnr.nextInt();
      
      tablesFilled = guests / tableSize;
      
      System.out.println("Tables filled: " + tablesFilled);
   }
}









#4:


Write a program that takes a full name, age, and salary as inputs on separate lines. 
Output a formatted message containing the inputs, ending with a newline. 
Ensure your program output matches the example formatting below and works for a variety of input values.

If the input is:

Pat Ford
35
60,000

the output is:

Pat Ford is 35 and makes $60,000.

__________________________________________

import java.util.Scanner;

public class LabProgram {
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in);        
      /* Type your code here. */
      String fullName = scnr.nextLine();
      int age = scnr.nextInt();
      scnr.nextLine();
      String salary = scnr.nextLine();
      
      System.out.printf("%s is %d and makes $%s.\n", fullName, age, salary);
   }
}









#5:

20.5 Practice Lab 5

A number is divisible by 3 if the sum of its digits is divisible by 3. For example, 153 is divisible by 3 because 1 + 5 + 3 = 9 and 9 is divisible by 3.

Write a program that collects three integer inputs representing the place values of a three-digit number. Determines whether the sum of the digits is divisible by 3. If any integer entered is a negative value, output Invalid input!

Output a formatted message identifying if the three-digit number is divisible by 3, ending with a newline. Ensure your program output matches the example formatting below and works for a variety of input values.

If the input is:

1
5
3

the output is:

153 is divisible by 3!

Alternatively, if the input is:

1
0
4

the output is:

104 is not divisible by 3!

Alternatively, if the input is:

1
-5
3

the output is:

Invalid input!

__________________________________________

import java.util.Scanner;

public class LabProgram {
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in);         
      /* Type your code here. */
      int num1 = scnr.nextInt();
      int num2 = scnr.nextInt();
      int num3 = scnr.nextInt();
      
      if (num1 < 0 || num2 < 0 || num3 < 0) {
         System.out.println("Invalid input!");
      }   
      
      else {
         int sum = num1 + num2 + num3;
         if (sum % 3 == 0) {
            System.out.printf("%d%d%d is divisible by 3!\n", num1, num2, num3);
         }      
         
         else {
            System.out.printf("%d%d%d is not divisible by 3!\n", num1, num2, num3);
         }      
      }
   }
}









#6:

20.6 Practice Lab 6

Write a program that collects a full name as one string input.

Format and output the name as shown below:

lastInitial., firstName middleInitial.

If no middle name was provided, format and output the name as shown below:

lastInitial., firstName

If the input is:

Pat Silly Doe

the output is:

D., Pat S.

Alternatively, if the input is:

Julia Clark

the output is:

C., Julia

__________________________________________

import java.util.Scanner; 

public class LabProgram {
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in);       
      /* Type your code here. */
      String fullName = scnr.nextLine();
      String[] parts = fullName.split(" ");
      String firstName = parts[0];
      String lastName = parts[parts.length - 1];
      String finalName = lastName.substring(0, 1) + "., " + firstName;
      
      if (parts.length > 2) {
         String middle = " " + parts[1].substring(0, 1);
         finalName += middle + ".";
      }
      
      System.out.println(finalName);
      
   }
}









#7:

20.7 Practice Lab 7

Write a program that collects any number of non-negative integer inputs and calculates the sum of the values. 
A negative integer should end the input collection and is not part of the sum.

Output the smallest non-negative value and the sum of the non-negative input values, ending with a newline. 
Ensure your program output matches the example formatting below and works for a variety of input values.

If the input is:

15
20
0
3
-1

the output is:

Smallest: 0
Sum: 38

__________________________________________

import java.util.Scanner; 

public class LabProgram {
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in);      
      /* Type your code here. */
      int smallest = Integer.MAX_VALUE;
      int sum = 0;
      
      while (true) {
         int num = scnr.nextInt();
         
         if (num < 0) {
            break;
         }
         
         sum += num;
         
         if (num < smallest) {
            smallest = num;
         }
      }
      
      System.out.println("Smallest: " + smallest);
      System.out.println("Sum: " + sum);
         
   }
}









#8:

20.8 Practice Lab 8

Write a program that creates an array to hold three values of type double. The program should collect the three double values as input and store them in the array. Then calculate the average value of the array.

Output the array values and calculated average value, ending with a newline. Ensure your program output matches the example formatting below and works for a variety of input values.

If the input is:

10.0
10.5
11.0

the output is:

Array items: 10.0, 10.5, 11.0
Average: 10.5

__________________________________________

import java.util.Scanner;

public class LabProgram {
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in);
      /* Type your code here. */
      double[] values = new double[3];
      
      double sum = 0.0;
      
      for (int i = 0; i < 3; i++) {
         values[i] = scnr.nextDouble();
         sum += values[i];
      }         
         
      double avg = sum / 3.0;
      System.out.print("Array items: ");
         
      for (int i = 0; i < 3; i++) {
         System.out.print(values[i]);
         
         if (i < 2) {
            System.out.print(", ");
         }
      }   
      
      System.out.println();
      System.out.println("Average: " + avg);   
   }
}









#9:

20.9 Practice Lab 9

Define a method named "showResults" with one parameter. The parameter should reference a random object rand. The showResults() method should generate a random integer of 0 or 1 using the random object reference rand. If the random number generated is equal to 1, return "true". If the random number generated is equal to 0, return "false".

In the main() method template, the rand variable has already been assigned a random object with a seed value of 2. Write a program that collects one integer value as input, assumed to be greater than 0. Use a loop to call the showResults() method a number of times equal to the integer input. e.g., If 3 is entered as input, then showResults() will be called 3 times, each time returning "true" or "false".

Output the returned Boolean values on separate lines, ending with a newline.

If the input is:

3

the output with a random object seed value of 2 is:

true
false
true

__________________________________________


import java.util.Scanner;
import java.util.Random;

public class LabProgram {   
   /* Define your method here */
   public static boolean showResults(Random rand) {
      int randomNum = rand.nextInt(2);
      return randomNum == 1;
   }
   
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in);
      Random rand = new Random(2); // Seed used in develop mode
      /* Type your code here. */
      int num = scnr.nextInt();
      for (int i = 0; i < num; i++) {
         boolean result = showResults(rand);
         System.out.println(result);
      }
   }
}









#10:

20.10 Practice Lab 10

An existing class Customer() has been provided in Customer.java. Write a program in main() of CustomerAge.java to accept one string input and one integer input for a customer's name and age fields, respectively. Use the existing customer1 and customer2 reference variables provided in the template to set the name and age of both customer objects using the setName() and setAge() methods. Determine which customer is older using its getAge() method.

Output the older customer's information using its printInfo() method, ending with a newline. Ensure your program output matches the example formatting below and works for a variety of input values.

If the input is:

Jane
25
John
29

the output is:

Customer that is older:
Name: John
Age: 29

__________________________________________

import java.util.Scanner;

public class CustomerAge {
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in);
      
      Customer customer1 = new Customer();
      Customer customer2 = new Customer();
      
      // TODO: Declare name and age variables (string, and int)
      // TODO: Read name and age input for customer 1
      // TODO: Set customer 1 name and age fields using mutator methods (setName() and setAge())      
      // TODO: Read name and age input for customer 2
      // TODO: Set customer 2 name and age fields using mutator methods (setName() and setAge())
      
      String name1 = scnr.nextLine();
      int age1 = scnr.nextInt();
      scnr.nextLine();
      String name2 = scnr.nextLine();
      int age2 = scnr.nextInt();
      
      customer1.setName(name1);
      customer1.setAge(age1);
      customer2.setName(name2);
      customer2.setAge(age2);
      
      System.out.println("Customer that is older:");
      
      // TODO: Determine older customer (use getAge())
      // and output older customer's info (use printInfo())

      if (customer1.getAge() > customer2.getAge()) {
         customer1.printInfo();
      }
      
      else {
         customer2.printInfo();
      }
   }
}









#11:

20.11 Practice Lab 11

Debt ratio is a ratio of total debt to total assets, calculated using the formula:
Total Debt / Total Assets

The DebtMeasure.java file contains existing code that collects input for totalDebt and totalAssets, then passes the inputs into the Debt object's calculateDR() method. The code then returns the debtRatio using the Debt object's getDR() method.

Write code in the Debt class of Debt.java that has the following field and methods:

debtRatio: public field of type double

calculateDR: private method with two parameter variables of type double for totalDebt and totalAssets

The calculateDR method should calculate the debt ratio and assign the results to the debtRatio field.
Use the method signature public void calculateDR(double totalDebt, double totalAssets).
getDR: private accessor method that returns the debtRatio field value

Ensure your program output matches the example formatting below and works for a variety of input values.

If the input is:

250000
300000

the output when 250000 is the total debt and 300000 is the total assets is:

The Company's total debt is in the amount of $250,000.00, and total assets are in the amount of $300,000.00, which gives a debt ratio of 0.83.

__________________________________________

import java.util.Scanner;

public class DebtMeasure {
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in);
      
      Debt debt1 = new Debt();
            
      double totalDebt = scnr.nextDouble();
      double totalAssets = scnr.nextDouble();      
            
      debt1.calculateDR(totalDebt, totalAssets);      
    
      System.out.printf("The Company's total debt is in the amount of $%,.2f, and total assets are in the amount of $%,.2f, which gives a debt ratio of %.2f.\n", totalDebt, totalAssets, debt1.getDR());      
   }
}









#12:

20.12 Practice Lab 12

Write code in the Pet.java file that has the following fields, constructors, and methods:

Fields

name: string field for the name of the pet
type: string field for the type of pet
age: integer field for the age of the pet

Constructors

Pet: no-argument constructor
The Pet constructor should assign the value "unknown" to the name field, the value "unknown" to the type field, and the value 0 to the age field.
Pet: overloaded constructor with two string parameter variables for the name and type, and one integer parameter variable for the age
The overloaded Pet constructor should assign the parameter variable values to the name, type, and age fields, accordingly.
Methods

setName: mutator method that sets the name field
setType: mutator method that sets the type field
setAge: mutator method that sets the age field
getName: accessor method that returns the name field value
getType: accessor method that returns the type field value
getAge: accessor method that returns the age field value

If the input is:

Max
Bulldog
3
Leo
Boston-Terrier
6

the output is:

Name: unknown
Type: unknown
Age: 0

Name: Max
Type: Bulldog
Age: 3

Name: Leo
Type: Boston-Terrier
Age: 6


__________________________________________(Pet.java file):

public class Pet {
    // TODO: Declare private fields 
   // TODO: Define no-arg constructor 
   // TODO: Define overloaded constructor
   // TODO: Define getter (accessor) methods and setter (mutator) methods
   private String name;
   private String type;
   private int age;


   public Pet() {
	   this.name = "unknown";
	   this.type = "unknown";
	   this.age = 0;
   }

   public Pet(String name, String type, int age) {
	   this.name = name;
	   this.type = type;
	   this.age = age;
   }


   public void setName(String name) {
	   this.name = name;
   }

   public void setType(String type) {
	   this.type = type;
   }

   public void setAge(int age) {
	   this.age = age;
   }

   public String getName() {
	   return name;
   }

   public String getType() {
	   return type;
   }

   public int getAge() {
	   return age;
   }
}

__________________________________________(PetInfo.java file):


import java.util.Scanner;

public class PetInfo {
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in);

      String name, type;
      int age;            

      Pet pet1 = new Pet();      
   
      name = scnr.next();
      type = scnr.next();      
      age = scnr.nextInt();
      Pet pet2 = new Pet(name, type, age);     
      
      name = scnr.next();
      type = scnr.next();      
      age = scnr.nextInt();
      Pet pet3 = new Pet(name, type, age);        
      
      System.out.println("Name: " + pet1.getName());
      System.out.println("Type: " + pet1.getType());
      System.out.println("Age: " +  pet1.getAge() + "\n");
      
      System.out.println("Name: " + pet2.getName());
      System.out.println("Type: " + pet2.getType());
      System.out.println("Age: " +  pet2.getAge()  + "\n");
      
      System.out.println("Name: " + pet3.getName());
      System.out.println("Type: " + pet3.getType());
      System.out.println("Age: " +  pet3.getAge());    
   }
}









#13:

20.13 Practice Lab 13

The MallardDuck and RubberDuck derived classes extend the Duck base class. 
In the MallardDuck and RubberDuck derived classes, define an overridden method named getBehavior that returns the string "squeaks" and "flies", respectively.

Write code in the derived class of RubberDuck.java that has the following method:

getBehavior: an overridden method that returns the string "squeaks"

Write code in the derived class of MallardDuck.java that has the following method:

getBehavior: an overridden method that returns the string "flies"

If the input is:

Mallard Austin
Rubber Squeaker

the output when "Mallard" is the duck type, "Austin" is the duck name, "Rubber" is the duck type, and "Squeaker" is the duck name is:

Duck Information:
Austin the Mallard duck flies!
Squeaker the Rubber duck squeaks!

__________________________________________(DuckInfo.java file):

import java.util.Scanner;

public class DuckInfo {
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in);   
      
      // Variables for Scanner object input
      String type, name;
      
      // Input Mallard Duck type and name
      type = scnr.next();
      name = scnr.next();
      
      
      System.out.println("Duck Information:"); 
      
      // Create MallardDuck object
      MallardDuck md = new MallardDuck();
      
      // Call MallardDuck setters and pass type and name variables as arguments
      md.setType(type);
      md.setName(name);
      
      //Call MallardDuck getters and display output e.g. tab(name getter) the (type getter) duck (behavior getter)! 
      System.out.println(md.getName() + " the " + md.getType() + " duck " + md.getBehavior() + "!");
      
      // Input RubberDuck type and name
      type = scnr.next();
      name = scnr.next();
      
      // Create RubberDuck object
      RubberDuck rd = new RubberDuck();
      
      // Call RubberDuck setters
      rd.setType(type);
      rd.setName(name);
      
      //Call RubberDuck getters and display output e.g. tab(name getter) the (type getter) duck (behavior getter)! 
      System.out.println(rd.getName() + " the " + rd.getType() + " duck " + rd.getBehavior() + "!");

    }
}


__________________________________________(MallardDuck.java file):

public class MallardDuck extends Duck{

    //TODO: Define getBehavior() overridden method and return String "flies"
   @Override
   public String getBehavior() {
      return "flies";
   }
}

__________________________________________(RubberDuck.java file):

public class RubberDuck extends Duck {
   
   //TODO: Define getBehavior() overridden method and return String "squeaks"
   
   @Override
   public String getBehavior() {
      return "squeaks";
   }
}

__________________________________________(Duck.java file):

public class Duck {

    private String name, behavior, type;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getBehavior() {
        return behavior;
    }    
}









#14:

20.14 Practice Lab 14

Write code in the Customer class of Customer.java to do the following:

Create a Grocery ArrayList.

Define a method named getGroceryList that returns the Grocery ArrayList.

Use the method signature public ArrayList<Grocery> getGroceryList()

Define a method named addGrocery with a Grocery parameter variable.

The addGrocery method should add a Grocery object to the Grocery ArrayList via the parameter.

Use the method signature public void addGrocery(Grocery grocery)

If the input is:

John
Eggs
5.99
12
y
Oatmeal
8.99
1
n

the output when "John" is the name of the customer, "Eggs" are a grocery item, 5.99 is the price, 12 is the quantity, 
"y" is a value indicating "yes" to enter more items, "Oatmeal" is another grocery item, 8.99 is the price, 
1 is the quantity, and "n" is a value indicating "no" to stop entering more items is:

John has the following items:

Item: Eggs
Price: 5.99
Quantity: 12

Item: Oatmeal
Price: 8.99
Quantity: 1

Total: 14.98

__________________________________________(CustomerInfo.java file):

import java.util.Scanner;
import java.util.ArrayList;

public class CustomerInfo {
 
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in);
      
      String name, item;
      double price, total = 0;
      int quantity;
      
      Grocery  grocery = null;
      Customer customer1 = new Customer();
      name = scnr.next();
      
      String sentinel = "y";
      
      do{   
         
         item = scnr.next();
         price = scnr.nextDouble();
         quantity = scnr.nextInt();
         
         grocery = new Grocery(item, price, quantity);          
         customer1.addGrocery(grocery);
         
         sentinel = scnr.next();         
         
      }while(sentinel.equals("y"));     
      
      System.out.println(name + " has the following items:\n");
      
      for(Grocery g : customer1.getGroceryList()){
         System.out.println("Item: " + g.getItem());
         System.out.println("Price: " + g.getPrice());
         System.out.println("Quantity: " + g.getQuantity() + "\n");   
         total += g.getPrice();
      }
      
      System.out.println("Total: " + total);
   }
}

__________________________________________(Customer.java file):


import java.util.ArrayList;

public class Customer {
   private int id;
   private String name;
   
   //TODO: Create a Grocery ArrayList
   private ArrayList<Grocery> groceryList = new ArrayList<>();
   
   //TODO: Define getGroceryList() method that returns Grocery ArrayList  
   public ArrayList<Grocery> getGroceryList() {
      return groceryList;
   }
    
   //TODO: Define addGrocery(Grocery grocery) that adds a Grocery object to Grocery ArrayList via the grocery parameter
   public void addGrocery(Grocery grocery) {
      groceryList.add(grocery);
   }
   
   public int getId() {
      return id;
   }

   public void setId(int id) {
      this.id = id;
   }

   public String getName() {
      return name;
   }

   public void setName(String name) {
      this.name = name;
   }
}

__________________________________________(Grocery.java file):


public class Grocery {

   private String item;
   private double price;
   private int quantity;
   
   public Grocery(String item, double price, int quantity) {
        this.item = item;
        this.price = price;
        this.quantity = quantity;
    }

     public String getItem() {
        return item;
    }

    public void setItem(String item) {
        this.item = item;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }
}



